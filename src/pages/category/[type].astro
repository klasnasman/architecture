---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import BaseLayout from "@layouts/BaseLayout.astro";
import Filters from "@components/Filters.astro";
import Transitions from "@components/Transitions";

export async function getStaticPaths() {
  const allPosts = await getCollection("project");
  const uniqueTypes = [...new Set(allPosts.map((post) => post.data.type))];

  return uniqueTypes.map((type) => {
    const filteredPosts = allPosts.filter((post) => post.data.type === type);
    return {
      params: { type: type },
      props: { posts: filteredPosts },
    };
  });
}

const { posts } = Astro.props;
---

<BaseLayout title={posts[0].data.type.toUpperCase()}>
  <Transitions client:load>
    <section class="project__photos">
      {
        posts.map((entry: any) => (
          <div class="projects">
            <a href={`/project/${entry.slug}`} class="project__link">
              <figure>
                <Image class="project__img lazy__load" src={entry.data.thumb} alt="" width={1200} />
              </figure>
              <div class="project__title">
                <div class="project__row">
                  <p class="text">{entry.data.project}</p>
                  <div class="line" />
                  <p class="text">{entry.data.type}</p>
                </div>
              </div>
            </a>
          </div>
        ))
      }
    </section>
  </Transitions>
  <Filters />
</BaseLayout>

<style>
  .project__photos {
    display: grid;
    justify-items: center;
    grid-gap: var(--spacer-m);
    grid-template-columns: var(--grid-columns-medium);
    transition: grd;
    padding-inline: var(--spacer-m);
    padding-block-end: calc(var(--header-height) + var(--spacer-xl));
  }

  .smaller-grid {
    grid-template-columns: var(--grid-columns-small);
  }

  .larger-grid {
    grid-template-columns: var(--grid-columns-large);
  }

  .project__img {
    min-width: inherit;
    min-height: inherit;
    object-fit: cover;
    aspect-ratio: 4 / 5;
  }

  @media (hover: hover) {
  .project__img:hover {
    outline: 1px solid black;
    }
  }

  .project__title {
    display: flex;
    justify-content: space-between;
    flex-direction: row;
    text-transform: capitalize;
    position: initial;
    margin-block-start: var(--spacer-xs);
  }

  .project__row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    gap: 0.5rem;
  }

  .row__wrap {
    gap: 0rem;
    flex-wrap: wrap;
  }

  .text {
    flex-shrink: 0;
  }

  .line {
    width: 100%;
    height: 1px;
    background-color: #000;
  }
</style>

<script is:inline>
  const filterClickHandle = () => {
    const buttonIcon = document.getElementById("button__icon");
    const filterButton = document.getElementById("filter__btn");
    const filterDiv = document.querySelector(".filters");
    const navLinks = document.querySelectorAll(".link");
    const projectLinks = document.querySelectorAll(".project__link");

    const openFilters = () => {
      buttonIcon.classList.add("open");
      filterDiv.classList.add("open");
      sessionStorage.setItem("filtersOpen", "true");
    };

    const closeFilters = () => {
      buttonIcon.classList.remove("open");
      filterDiv.classList.remove("open");
      sessionStorage.setItem("filtersOpen", "false");
    };

    if (window.location.pathname.includes("/project")) {
      closeFilters();
    }

    if (filterButton) {
      filterButton.addEventListener("click", (event) => {
        if (filterDiv.classList.contains("open")) {
          closeFilters();
        } else {
          openFilters();
        }
      });
    }

    navLinks.forEach((link) => {
      link.addEventListener("click", () => {
        closeFilters();
      });
    });

    projectLinks.forEach((link) => {
      link.addEventListener("click", () => {
        closeFilters();
      });
    });

    const filtersOpen = sessionStorage.getItem("filtersOpen");
    if (filtersOpen === "true") {
      openFilters();
    }
  };

  filterClickHandle();
</script>
