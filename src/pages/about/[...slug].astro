---
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import BaseLayout from "@layouts/BaseLayout.astro";
import ContainerLayout from "@layouts/ContainerLayout.astro";
import AccordionAbout from "@components/AccordionAbout.astro";
import AccordionProcess from "@components/AccordionProcess.astro";
import Transitions from "@components/Transitions";

interface Props {
  entry: CollectionEntry<"about">;
}

export async function getStaticPaths() {
  const about = await getCollection("about");
  return about.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const currentPath = Astro.url.pathname;
const normalizedPath = currentPath.endsWith("/") ? currentPath.slice(0, -1) : currentPath;

const about = normalizedPath.endsWith("/us");
const process = normalizedPath.endsWith("/process");
---

<BaseLayout title={entry.data.title.toUpperCase()}>
  <Transitions client:load>
    <ContainerLayout>
      <div class="markdown">
        <div class="content flow">
          <Content />
        </div>
        <Image class="project__img" src={entry.data.thumb} alt="" width={640} />
      </div>
      {about && <AccordionAbout />}
      {process && <AccordionProcess />}
    </ContainerLayout>
  </Transitions>
</BaseLayout>

<style>
  .markdown {
    display: flex;
    justify-content: flex-start;
    flex-direction: row;
    gap: 2rem;
  }

  @media (width<=900px) {
    .markdown {
      flex-direction: column;
    }
  }

  .content {
    display: flex;
    justify-content: flex-start;
    flex-direction: column;
  }

  .project__img {
    min-width: inherit;
    min-height: inherit;
    max-width: 400px;
  }

  @media (width<=900px) {
    .project__img {
      display: none;
    }
  }
</style>
